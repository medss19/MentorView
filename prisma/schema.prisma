// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mentor {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignments Assignment[]

  @@map("mentors")
}

model Student {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  rollNo    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignment Assignment?

  @@map("students")
}

model Assignment {
  id        String   @id @default(cuid())
  mentorId  String
  studentId String   @unique // Ensures one student can only be assigned to one mentor
  isLocked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  mentor Mentor @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  marks   Mark[]

  @@map("assignments")
}

model EvaluationParameter {
  id          String @id @default(cuid())
  name        String @unique // "Ideation", "Execution", "Viva/Pitch"
  maxMarks    Int    @default(10)
  description String?

  // Relations
  marks Mark[]

  @@map("evaluation_parameters")
}

model Mark {
  id           String @id @default(cuid())
  assignmentId String
  parameterId  String
  marksObtained Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  parameter  EvaluationParameter @relation(fields: [parameterId], references: [id])

  // Unique constraint - one mark per parameter per assignment
  @@unique([assignmentId, parameterId])
  @@map("marks")
}